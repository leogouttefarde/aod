+ 0
 /* This program is distributed under the GNU General Public License, version 2.
D 1 3
D 16 3
+ 62

+ 62
#struct option
+ 62
{
+ 62
# if (defined __STDC__ && __STDC__) || defined __cplusplus
+ 62
  const char *name;
+ 62
# else
+ 62
  char *name;
+ 62
# endif
+ 62
  /* has_arg can't be an enum because some compilers complain about
+ 62
     type mismatches in all the code that assumes it is an int.  */
+ 62
  int has_arg;
+ 62
  int *flag;
+ 62
  int val;
+ 62
};
= 64
define __ENCODE_H
d 70
+ 400

+ 400
extern void  oggpackB_writeinit(oggpack_buffer *b);
+ 400
extern void  oggpackB_writetrunc(oggpack_buffer *b,long bits);
+ 400
extern void  oggpackB_writealign(oggpack_buffer *b);
+ 400
extern void  oggpackB_writecopy(oggpack_buffer *b,void *source,long bits);
+ 400
extern void  oggpackB_reset(oggpack_buffer *b);
+ 400
extern void  oggpackB_writeclear(oggpack_buffer *b);
+ 400
extern void  oggpackB_readinit(oggpack_buffer *b,unsigned char *buf,int bytes);
+ 400
extern void  oggpackB_write(oggpack_buffer *b,unsigned long value,int bits);
+ 400
extern long  oggpackB_look(oggpack_buffer *b,int bits);
+ 400
extern long  oggpackB_look1(oggpack_buffer *b);
+ 400
extern void  oggpackB_adv(oggpack_buffer *b,int bits);
+ 400
extern void  oggpackB_adv1(oggpack_buffer *b);
+ 400
extern long  oggpackB_read(oggpack_buffer *b,int bits);
+ 400
extern long  oggpackB_read1(oggpack_buffer *b);
+ 400
extern long  oggpackB_bytes(oggpack_buffer *b);
+ 400
extern long  oggpackB_bits(oggpack_buffer *b);
+ 400
extern unsigned char *oggpackB_get_buffer(oggpack_buffer *b);
= 440
intern void     vorbis_info_init(vorbis_info *vi);
= 508
#def OV_ENOSEEK    -138
d 1077
= 1829
			return 0;
= 1834
int find_aiff_chunk(FILE *in, char *type, unsigned int *len)
= 1952
		aifc=0;
= 1954
		aifc=1;
+ 1973
	}
+ 1973
	
+ 1973
	if(aifc)
+ 1973
	{
+ 1973
		if(len < 22)
+ 1973
		{
+ 1973
			fprintf(stderr, _("Warning: AIFF-C header truncated.\n"));
+ 1973
			return 0;
+ 1973
		}
+ 1973

+ 1973
		if(!memcmp(buffer+18, "NONE", 4)) 
+ 1973
		{
+ 1973
			aiff->bigendian = 1;
+ 1973
		}
+ 1973
		else if(!memcmp(buffer+18, "sowt", 4)) 
+ 1973
		{
+ 1973
			aiff->bigendian = 0;
+ 1973
		}
+ 1973
		else
+ 1973
		{
+ 1973
			fprintf(stderr, _("Warning: Can't handle compressed AIFF-C (%c%c%c%c)\n"), *(buffer+18), *(buffer+19), *(buffer+20), *(buffer+21));
+ 1973
			return 0; /* Compressed. Can't handle */
+ 1973
		}
+ 1974

+ 2011
	elif(fread(buf2,1,8, in) < 8)
D 2012 7
= 2020
		printf(stderr, _("Warning: Unexpected EOF reading AIFF header\n"));
D 2024 2
+ 2034
		aiff->f = in;
+ 2034
		aiff->samplesread = 0;
+ 2034
		aiff->channels = format.channels;
+ 2034
		aiff->samplesize = format.samplesize;
+ 2034
		aiff->totalsamples = format.totalframes;
+ 2034

= 2035
pt->total_samples_per_channel = format.totalframes;
